type Query{
    categories: [Category!]! @all
    category(id: ID! @eq): Category @find
    products(
        search: String
        ,category_id: ID
        ,sort_order: String
        ,first: Int
    ): ProductPaginator! @field(resolver: "App\\GraphQL\\Queries\\ProductsResolver")
}

# add middleware web to get the user from the session
type Mutation{
    registerUser(
        name: String! @rules(apply: ["required", "string", "max:255"])
        ,email: String! @rules(apply: ["required", "email", "max:255", "unique:users,email"])
        ,password: String! @rules(apply: ["required", "string", "min:8", "confirmed", "App\\Rules\\PasswordComplexity"])
        ,password_confirmation: String!
    ): UserPayload! @field(resolver: "App\\GraphQL\\Mutations\\RegisterUser")

    addToCart(
        product_id: ID! @rules(apply: ["required", "exists:products,id"])
        ,quantity: Int! @rules(apply: ["required", "integer", "min:1"])
    ): ShoppingCart @field(resolver: "App\\GraphQL\\Mutations\\AddToCart") @guard
}

type Category{
    id: ID!
    name: String!
    description: String!

    subCategories: [Category] @hasMany
    products: [Product] @hasMany
}


type Product{
    id: ID!
    name: String!
    description: String!
    price: Float!
    stock: Int!
    image_url: String
    created_at: String

    category: Category @belongsTo
}

type User{
    id: ID!
    name: String!
    email: String!
    email_verified_at: String
    created_at: String
}

type ShoppingCart{
    id: ID!
    user_id: ID!
    total: Float!
    created_at: String
    updated_at: String

    items: [CartItem] @hasMany
    user: User @belongsTo
}

type CartItem{
    id: ID!
    cart_id: ID!
    product_id: ID!
    quantity: Int!
    total: Float!
    created_at: String
    updated_at: String

    product: Product @belongsTo
}

type ProductPaginator{
    data: [Product!]!
    paginatorInfo: SimplePaginatorInfo
}

type SimplePaginatorInfo{
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

type UserPayload{
    user: User!
    token: String!
}
