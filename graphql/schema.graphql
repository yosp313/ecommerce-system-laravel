type Query{
    categories: [Category!]! @all
    category(id: ID! @eq): Category @find
    products(
        search: String
        ,category_id: ID
        ,sort_order: String
        ,first: Int
    ): ProductPaginator! @field(resolver: "App\\GraphQL\\Queries\\ProductsResolver")

    orders(
        status: String,
        first: Int,
        sort: String,
    ): [Order!]! @field(resolver: "App\\GraphQL\\Queries\\OrdersResolver") @guard
}

# add middleware web to get the user from the session
type Mutation{
    registerUser(
        name: String! @rules(apply: ["required", "string", "max:255"])
        ,email: String! @rules(apply: ["required", "email", "max:255", "unique:users,email"])
        ,password: String! @rules(apply: ["required", "string", "min:8", "confirmed", "App\\Rules\\PasswordComplexity"])
        ,password_confirmation: String!
    ): UserPayload! @field(resolver: "App\\GraphQL\\Mutations\\RegisterUser")

    addToCart(
        product_id: ID! @rules(apply: ["required", "exists:products,id"])
        ,quantity: Int! @rules(apply: ["required", "integer", "min:1"])
    ): ShoppingCart @field(resolver: "App\\GraphQL\\Mutations\\AddToCart") @guard

    addAddress(
        label: String! @rules(apply: ["required", "string", "max:255"])
        ,name: String! @rules(apply: ["required", "string", "max:255"])
        ,address_line1: String! @rules(apply: ["required", "string", "max:255"])
        ,address_line2: String
        ,city: String! @rules(apply: ["required", "string", "max:255"])
        ,state: String! @rules(apply: ["required", "string", "max:255"])
        ,country: String! @rules(apply: ["required", "string", "max:255"])
        ,postal_code: String! @rules(apply: ["required", "string", "max:255"])
        ,phone_number: String! @rules(apply: ["required", "string", "max:255"])
    ): Address @field(resolver: "App\\GraphQL\\Mutations\\AddAddress") @guard

    createOrder(
        address_id: ID! @rules(apply: ["required", "exists:addresses,id"]),
        payment_method_id: ID! @rules(apply: ["required"]),
        cart_id: ID! @rules(apply: ["required", "exists:carts,id"])
    ): Order @field(resolver: "App\\GraphQL\\Mutations\\CreateOrder") @guard

    completeOrder(
        order_id: ID! @rules(apply: ["required", "exists:orders,id"])
    ): Order @field(resolver: "App\\GraphQL\\Mutations\\CompleteOrder") @guard

    createPaymentMethod(
        type: String! @rules(apply: ["required", "string", "max:255"]),
        last_four: String! @rules(apply: ["required", "string", "max:4"]),
    ): PaymentMethod @field(resolver: "App\\GraphQL\\Mutations\\CreatePaymentMethod") @guard
}

type Category{
    id: ID!
    name: String!
    description: String!

    subCategories: [Category] @hasMany
    products: [Product] @hasMany
}


type Product{
    id: ID!
    name: String!
    description: String!
    price: Float!
    stock: Int!
    image_url: String
    created_at: String

    category: Category @belongsTo
}

type User{
    id: ID!
    name: String!
    email: String!
    email_verified_at: String
    created_at: String
}

type ShoppingCart{
    id: ID!
    user_id: ID!
    total: Float!
    created_at: String
    updated_at: String

    items: [CartItem] @hasMany
    user: User @belongsTo
}

type CartItem{
    id: ID!
    cart_id: ID!
    product_id: ID!
    quantity: Int!
    total: Float!
    created_at: String
    updated_at: String

    product: Product @belongsTo
}

type Address{
    id: ID!
    user_id: ID!
    label: String!
    name: String!
    address_line1: String!
    address_line2: String
    city: String!
    state: String!
    postal_code: String!
    country: String!
    phone_number: String!
    created_at: String
    updated_at: String

    user: User @belongsTo
}

type ProductPaginator{
    data: [Product!]!
    paginatorInfo: SimplePaginatorInfo
}

type SimplePaginatorInfo{
    currentPage: Int!
    lastPage: Int!
    perPage: Int!
    total: Int!
}

type UserPayload{
    user: User!
    token: String!
}

type Order{
    id: ID!
    user_id: ID!
    address_id: ID!
    payment_method_id: ID!
    status: String!
    total: Float!
    created_at: String
    updated_at: String

    user: User @belongsTo
    address: Address @belongsTo
    orderItems: [OrderItem] @hasMany
}

type OrderItem{
    id: ID!
    order_id: ID!
    product_id: ID!
    quantity: Int!
    total: Float!
    created_at: String
    updated_at: String

    product: Product @belongsTo
}

type PaymentMethod{
    id: ID!
    user_id: ID!
    type: String!
    last_four: String!
    created_at: String
    updated_at: String

    user: User @belongsTo
}
